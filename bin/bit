#!/usr/bin/env node
/**
  Copyright (C) 2012 Jason Dooley
  Licensed under MIT
*/

var fs = require('fs'),
  path = require('path'),
  Bit, project, argv = process.argv,
  util = require('util'),
  action, params;

Bit = {
  initializeNew: function () {
    var path = process.env.PWD;
    this.initialize(path);
  },

  initialize: function (pathName,repos) {
    var location = pathName || process.env.PWD,
      directory = location,
      self = this;

    if (directory.match(/\/$/)) directory = directory.substr(0,directory.length-1);

    fs.exists(directory+'/.bit', function (exists) {
      if (exists) {
        console.log("Bit is already initialized");
      } else {
        self._createBitConfig(directory,repos);
      }
    });
  },

  _createBitConfig: function (dir,repos) {
    var configFile = dir+'/.bit/config.json', config = {};
    fs.mkdir(dir+'/.bit', function (error) {
      if (error) {
        console.log("bit directory already exists: ", error);
        return;
      }

      config.root = dir;
      config.repositories = repos || {};
      fs.writeFile(configFile,JSON.stringify(config), function (err) {
        console.log(err ? "Error creating Bit config." : "Bit initialized successfully.");
      });
    });
  },

  getConfig: function (callback) {
    var location = process.env.PWD;
    return require(location+'/.bit/config.json');
  },

  writeConfig: function (path,config,callback) {
    var location = path || process.env.PWD;
    fs.writeFile(location+'/.bit/config.json', JSON.stringify(config), function (err) {
      if (callback) callback.call(this,err);
    });
  },

  list: function () {
    var config = this.getConfig(), repos = config.repositories;

    console.log('root: ', config.root);
    for (var repo in repos) {
      console.log(repo+': ', repos[repo]);
    }
  },

  removeBit: function (path) {
    if (!path) path = process.env.PWD;
    fs.rmdir(path+'/.bit');
    console.log("Bit has been removed from "+path);
  },

  addRepository: function (args) {
    var config = this.getConfig(),
      name = args[0], path = args[1];

    if (!config.repositories[name]) {
      config.repositories[name] = path;
      this.initialize(path, {parent: process.env.PWD});
      this.writeConfig(null,config);
    } else {
      console.log('Bit already following this repository');
    }
  },

  performOn: function (argsArray) {
    var name = argsArray.shift(),
      config = this.getConfig();

    this._perform(name,config.repositories[name],argsArray);
  },

  _perform: function (repoName,path,args) {
    var toPerform = args.join(' '), exec = require('child_process').exec;
    if (path && !path.match(/\/$/)) path+='/';

    if (path) {
      exec('git --git-dir='+path+'.git --work-tree='+path+' '+toPerform, function(error, stdout, stderr){
        console.log("# "+ (repoName ? repoName : 'root') +" git "+args);
        console.log(stdout);
      });
    }
  },

  removeRepository: function (names) {
    if (names === null || names.length === 0) { return; }

    var config = this.getConfig(), nn, r;

    for (var i=0,l=names.length;i<l;i+=1) {
      nn = names[i];

      r = config.repositories[nn];
      if (r === null || r === undefined) {
        console.log("Repo does not exist: ", nn);
        return;
      }

      delete config.repositories[nn];
      console.log("Removed ", nn);
    }
  },

  proceed: function (args) {
    var config = this.getConfig(), repos = config.repositories;
    this._perform('root',config.root,args);

    for (var repo in repos) {
      this._perform(repo, repos[repo], args);
    }
  }
};

action = argv[2];
params = argv.slice(3,argv.length);

switch (action) {
  case 'init':
    Bit.initializeNew();
    break;
  case 'add-repository':
  case 'add':
  case '-a':
    Bit.addRepository(params);
    break;
  case 'remove-repository':
  case 'remove':
  case '-r':
    Bit.removeRepository(params);
    break;
  case 'on':
    Bit.performOn(params);
    break;
  case 'list':
    Bit.list();
    break;
  default:
    Bit.proceed(argv.slice(2, argv.length));
}


